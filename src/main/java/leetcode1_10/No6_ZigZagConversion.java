package leetcode1_10;/** * No6_ZigZagConversion * https://leetcode.com/problems/zigzag-conversion/ * * @Author zc * @Create 2016-06-24-17:48 */public class No6_ZigZagConversion {    public String convert(String s, int numRows) {        if(numRows == 1) {            return s;        }        StringBuilder sb = new StringBuilder();        char[] arr = s.toCharArray();        for(int row = 0; row < numRows; row++) {            boolean gapFlag = true;//两步走，记录该走哪一步            int gapOne = 2 * numRows - 2 - row * 2,gapTwo = row * 2;//每行相邻三个数(首行/末行必定为两个数)间的步长            int currIndex = row;//本行第一个元素            while(currIndex < arr.length) {                sb.append(arr[currIndex]);                if(gapFlag) {                    currIndex = getCurrIndex(currIndex,gapOne,gapTwo);                } else {                    currIndex = getCurrIndex(currIndex,gapTwo,gapOne);                }                gapFlag = !gapFlag;            }        }        return sb.toString();    }    private int getCurrIndex(int currIndex,int gapA,int gapB) {        //进行步长计算，步为0时则为首行或末行，直接加最长步长        return gapA == 0 ? currIndex + gapB : currIndex + gapA;    }}