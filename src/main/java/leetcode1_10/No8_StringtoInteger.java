package leetcode1_10;/** * No8_StringtoInteger * https://leetcode.com/problems/string-to-integer-atoi/ * * @Author zc * @Create 2016-06-29-17:42 */public class No8_StringtoInteger {    public int myAtoi(String str) {        if(str == null || str.length() == 0) {            return 0;        }        //存储结果        long res = 0;        //记录是否正数、是否已存在符号、是否能在中间插入空格处理（"123 456"）或（"  - 123"）这种数字        boolean isPositive = true,hasSymbol = false,hasSpace = true;        for(int i = 0;i < str.length(); i++) {            int s = getNum(str.charAt(i));            //如果非0-9 + - space 直接返回            if(s == 999) {                return getResult(res);            }            //如果是space            if (s == 888) {                if(!hasSpace) {                    //space不可存在，直接返回                    return getResult(res);                }                continue;            }            //如果是符号            if(s == 777) {                if(hasSymbol) {                    return getResult(res);                }                //符号不存在，标记正负，并标价符号已存在，标记空格不应存在                isPositive = isPositive(str.charAt(i));                hasSymbol = true;                hasSpace = false;                continue;            }            //判断正负数            if(isPositive) {                res = res * 10 + s;            } else {                res = res * 10 - s;            }            //判断当前结果            if(res > Integer.MAX_VALUE) {                return Integer.MAX_VALUE;            }            if(res < Integer.MIN_VALUE) {                return Integer.MIN_VALUE;            }            //进入计算，则空格不应存在            hasSpace = false;        }        return getResult(res);    }    private int getResult(long l) {        if(l > Integer.MAX_VALUE) {            return Integer.MAX_VALUE;        } else if(l < Integer.MIN_VALUE) {            return Integer.MIN_VALUE;        }        return (int) l;    }    private boolean isPositive(char c) {        return c == '+';    }    private int getNum(char c) {        switch (c) {            case ' ' : return 888;            case '+' : return 777;            case '-' : return 777;            case '0' : return 0;            case '1' : return 1;            case '2' : return 2;            case '3' : return 3;            case '4' : return 4;            case '5' : return 5;            case '6' : return 6;            case '7' : return 7;            case '8' : return 8;            case '9' : return 9;        }        return 999;    }}